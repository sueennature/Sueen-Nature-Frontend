{
  "resolvedId": "/var/www/html/Sueen-Nature-Frontend/node_modules/flowbite-datepicker/js/picker/views/MonthsView.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import {hasProperty, pushUnique, createTagRepeat} from '../../lib/utils.js';\nimport {dateValue} from '../../lib/date.js';\nimport {parseHTML} from '../../lib/dom.js';\nimport View from './View.js';\n\nfunction computeMonthRange(range, thisYear) {\n  if (!range || !range[0] || !range[1]) {\n    return;\n  }\n\n  const [[startY, startM], [endY, endM]] = range;\n  if (startY > thisYear || endY < thisYear) {\n    return;\n  }\n  return [\n    startY === thisYear ? startM : -1,\n    endY === thisYear ? endM : 12,\n  ];\n}\n\nexport default class MonthsView extends View {\n  constructor(picker) {\n    super(picker, {\n      id: 1,\n      name: 'months',\n      cellClass: 'month',\n    });\n  }\n\n  init(options, onConstruction = true) {\n    if (onConstruction) {\n      this.grid = this.element;\n      this.element.classList.add('months', 'datepicker-grid', 'w-64', 'grid', 'grid-cols-4');\n      this.grid.appendChild(parseHTML(createTagRepeat('span', 12, {'data-month': ix => ix})));\n    }\n    super.init(options);\n  }\n\n  setOptions(options) {\n    if (options.locale) {\n      this.monthNames = options.locale.monthsShort;\n    }\n    if (hasProperty(options, 'minDate')) {\n      if (options.minDate === undefined) {\n        this.minYear = this.minMonth = this.minDate = undefined;\n      } else {\n        const minDateObj = new Date(options.minDate);\n        this.minYear = minDateObj.getFullYear();\n        this.minMonth = minDateObj.getMonth();\n        this.minDate = minDateObj.setDate(1);\n      }\n    }\n    if (hasProperty(options, 'maxDate')) {\n      if (options.maxDate === undefined) {\n        this.maxYear = this.maxMonth = this.maxDate = undefined;\n      } else {\n        const maxDateObj = new Date(options.maxDate);\n        this.maxYear = maxDateObj.getFullYear();\n        this.maxMonth = maxDateObj.getMonth();\n        this.maxDate = dateValue(this.maxYear, this.maxMonth + 1, 0);\n      }\n    }\n    if (options.beforeShowMonth !== undefined) {\n      this.beforeShow = typeof options.beforeShowMonth === 'function'\n        ? options.beforeShowMonth\n        : undefined;\n    }\n  }\n\n  // Update view's settings to reflect the viewDate set on the picker\n  updateFocus() {\n    const viewDate = new Date(this.picker.viewDate);\n    this.year = viewDate.getFullYear();\n    this.focused = viewDate.getMonth();\n  }\n\n  // Update view's settings to reflect the selected dates\n  updateSelection() {\n    const {dates, rangepicker} = this.picker.datepicker;\n    this.selected = dates.reduce((selected, timeValue) => {\n      const date = new Date(timeValue);\n      const year = date.getFullYear();\n      const month = date.getMonth();\n      if (selected[year] === undefined) {\n        selected[year] = [month];\n      } else {\n        pushUnique(selected[year], month);\n      }\n      return selected;\n    }, {});\n    if (rangepicker && rangepicker.dates) {\n      this.range = rangepicker.dates.map(timeValue => {\n        const date = new Date(timeValue);\n        return isNaN(date) ? undefined : [date.getFullYear(), date.getMonth()];\n      });\n    }\n  }\n\n  // Update the entire view UI\n  render() {\n    // refresh disabled months on every render in order to clear the ones added\n    // by beforeShow hook at previous render\n    this.disabled = [];\n\n    this.picker.setViewSwitchLabel(this.year);\n    this.picker.setPrevBtnDisabled(this.year <= this.minYear);\n    this.picker.setNextBtnDisabled(this.year >= this.maxYear);\n\n    const selected = this.selected[this.year] || [];\n    const yrOutOfRange = this.year < this.minYear || this.year > this.maxYear;\n    const isMinYear = this.year === this.minYear;\n    const isMaxYear = this.year === this.maxYear;\n    const range = computeMonthRange(this.range, this.year);\n\n    Array.from(this.grid.children).forEach((el, index) => {\n      const classList = el.classList;\n      const date = dateValue(this.year, index, 1);\n\n      el.className = `datepicker-cell hover:bg-gray-100 dark:hover:bg-gray-600 block flex-1 leading-9 border-0 rounded-lg cursor-pointer text-center text-gray-900 dark:text-white font-semibold text-sm ${this.cellClass}`;\n      if (this.isMinView) {\n        el.dataset.date = date;\n      }\n      // reset text on every render to clear the custom content set\n      // by beforeShow hook at previous render\n      el.textContent = this.monthNames[index];\n\n      if (\n        yrOutOfRange\n        || isMinYear && index < this.minMonth\n        || isMaxYear && index > this.maxMonth\n      ) {\n        classList.add('disabled');\n      }\n      if (range) {\n        const [rangeStart, rangeEnd] = range;\n        if (index > rangeStart && index < rangeEnd) {\n          classList.add('range');\n        }\n        if (index === rangeStart) {\n          classList.add('range-start');\n        }\n        if (index === rangeEnd) {\n          classList.add('range-end');\n        }\n      }\n      if (selected.includes(index)) {\n        classList.add('selected', 'bg-blue-700', '!bg-primary-700', 'text-white', 'dark:bg-blue-600', 'dark:!bg-primary-600', 'dark:text-white');\n        classList.remove('text-gray-900', 'hover:bg-gray-100', 'dark:text-white', 'dark:hover:bg-gray-600');\n      }\n      if (index === this.focused) {\n        classList.add('focused');\n      }\n\n      if (this.beforeShow) {\n        this.performBeforeHook(el, index, date);\n      }\n    });\n  }\n\n  // Update the view UI by applying the changes of selected and focused items\n  refresh() {\n    const selected = this.selected[this.year] || [];\n    const [rangeStart, rangeEnd] = computeMonthRange(this.range, this.year) || [];\n    this.grid\n      .querySelectorAll('.range, .range-start, .range-end, .selected, .focused')\n      .forEach((el) => {\n        el.classList.remove('range', 'range-start', 'range-end', 'selected', 'bg-blue-700', '!bg-primary-700', 'dark:bg-blue-600', 'dark:!bg-primary-700', 'dark:text-white', 'text-white', 'focused');\n        el.classList.add('text-gray-900', 'hover:bg-gray-100', 'dark:text-white', 'dark:hover:bg-gray-600');\n      });\n    Array.from(this.grid.children).forEach((el, index) => {\n      const classList = el.classList;\n      if (index > rangeStart && index < rangeEnd) {\n        classList.add('range');\n      }\n      if (index === rangeStart) {\n        classList.add('range-start');\n      }\n      if (index === rangeEnd) {\n        classList.add('range-end');\n      }\n      if (selected.includes(index)) {\n        classList.add('selected', 'bg-blue-700', '!bg-primary-700', 'text-white', 'dark:bg-blue-600', 'dark:!bg-primary-600', 'dark:text-white');\n        classList.remove('text-gray-900', 'hover:bg-gray-100', 'dark:text-white', 'dark:hover:bg-gray-600');\n      }\n      if (index === this.focused) {\n        classList.add('focused');\n      }\n    });\n  }\n\n  // Update the view UI by applying the change of focused item\n  refreshFocus() {\n    this.grid.querySelectorAll('.focused').forEach((el) => {\n      el.classList.remove('focused');\n    });\n    this.grid.children[this.focused].classList.add('focused');\n  }\n}",
      "start": 1727432818932,
      "end": 1727432819065,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1727432819065,
      "end": 1727432819065,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1727432819065,
      "end": 1727432819065,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1727432819065,
      "end": 1727432819065,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1727432819065,
      "end": 1727432819065,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1727432819065,
      "end": 1727432819065,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1727432819065,
      "end": 1727432819065,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1727432819065,
      "end": 1727432819065,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1727432819065,
      "end": 1727432819065,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1727432819065,
      "end": 1727432819065,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1727432819065,
      "end": 1727432819065,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1727432819065,
      "end": 1727432819065,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1727432819065,
      "end": 1727432819065,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1727432819065,
      "end": 1727432819066,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1727432819066,
      "end": 1727432819066,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1727432819066,
      "end": 1727432819066,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1727432819066,
      "end": 1727432819066,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1727432819066,
      "end": 1727432819066,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1727432819066,
      "end": 1727432819066,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1727432819066,
      "end": 1727432819066,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1727432819066,
      "end": 1727432819066,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1727432819066,
      "end": 1727432819068,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1727432819068,
      "end": 1727432819068,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1727432819068,
      "end": 1727432819068,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1727432819068,
      "end": 1727432819068,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1727432819068,
      "end": 1727432819068,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1727432819068,
      "end": 1727432819068,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1727432819068,
      "end": 1727432819068,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1727432819068,
      "end": 1727432819068,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1727432819068,
      "end": 1727432819068,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1727432819068,
      "end": 1727432819068,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1727432819068,
      "end": 1727432819068,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1727432819068,
      "end": 1727432819068,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1727432819068,
      "end": 1727432819068,
      "order": "normal"
    }
  ]
}
