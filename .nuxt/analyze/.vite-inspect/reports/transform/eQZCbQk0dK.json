{
  "resolvedId": "/var/www/html/Sueen-Nature-Frontend/node_modules/flowbite-datepicker/js/picker/Picker.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import {hasProperty, lastItemOf, isInRange, limitToRange} from '../lib/utils.js';\nimport {today} from '../lib/date.js';\nimport {parseHTML, showElement, hideElement, emptyChildNodes} from '../lib/dom.js';\nimport {registerListeners} from '../lib/event.js';\nimport pickerTemplate from './templates/pickerTemplate.js';\nimport DaysView from './views/DaysView.js';\nimport MonthsView from './views/MonthsView.js';\nimport YearsView from './views/YearsView.js';\nimport {triggerDatepickerEvent} from '../events/functions.js';\nimport {\n  onClickTodayBtn,\n  onClickClearBtn,\n  onClickViewSwitch,\n  onClickPrevBtn,\n  onClickNextBtn,\n  onClickView,\n  onClickPicker,\n} from '../events/pickerListeners.js';\n\nfunction processPickerOptions(picker, options) {\n  if (options.title !== undefined) {\n    if (options.title) {\n      picker.controls.title.textContent = options.title;\n      showElement(picker.controls.title);\n    } else {\n      picker.controls.title.textContent = '';\n      hideElement(picker.controls.title);\n    }\n  }\n  if (options.prevArrow) {\n    const prevBtn = picker.controls.prevBtn;\n    emptyChildNodes(prevBtn);\n    options.prevArrow.forEach((node) => {\n      prevBtn.appendChild(node.cloneNode(true));\n    });\n  }\n  if (options.nextArrow) {\n    const nextBtn = picker.controls.nextBtn;\n    emptyChildNodes(nextBtn);\n    options.nextArrow.forEach((node) => {\n      nextBtn.appendChild(node.cloneNode(true));\n    });\n  }\n  if (options.locale) {\n    picker.controls.todayBtn.textContent = options.locale.today;\n    picker.controls.clearBtn.textContent = options.locale.clear;\n  }\n  if (options.todayBtn !== undefined) {\n    if (options.todayBtn) {\n      showElement(picker.controls.todayBtn);\n    } else {\n      hideElement(picker.controls.todayBtn);\n    }\n  }\n  if (hasProperty(options, 'minDate') || hasProperty(options, 'maxDate')) {\n    const {minDate, maxDate} = picker.datepicker.config;\n    picker.controls.todayBtn.disabled = !isInRange(today(), minDate, maxDate);\n  }\n  if (options.clearBtn !== undefined) {\n    if (options.clearBtn) {\n      showElement(picker.controls.clearBtn);\n    } else {\n      hideElement(picker.controls.clearBtn);\n    }\n  }\n}\n\n// Compute view date to reset, which will be...\n// - the last item of the selected dates or defaultViewDate if no selection\n// - limitted to minDate or maxDate if it exceeds the range\nfunction computeResetViewDate(datepicker) {\n  const {dates, config} = datepicker;\n  const viewDate = dates.length > 0 ? lastItemOf(dates) : config.defaultViewDate;\n  return limitToRange(viewDate, config.minDate, config.maxDate);\n}\n\n// Change current view's view date\nfunction setViewDate(picker, newDate) {\n  const oldViewDate = new Date(picker.viewDate);\n  const newViewDate = new Date(newDate);\n  const {id, year, first, last} = picker.currentView;\n  const viewYear = newViewDate.getFullYear();\n\n  picker.viewDate = newDate;\n  if (viewYear !== oldViewDate.getFullYear()) {\n    triggerDatepickerEvent(picker.datepicker, 'changeYear');\n  }\n  if (newViewDate.getMonth() !== oldViewDate.getMonth()) {\n    triggerDatepickerEvent(picker.datepicker, 'changeMonth');\n  }\n\n  // return whether the new date is in different period on time from the one\n  // displayed in the current view\n  // when true, the view needs to be re-rendered on the next UI refresh.\n  switch (id) {\n    case 0:\n      return newDate < first || newDate > last;\n    case 1:\n      return viewYear !== year;\n    default:\n      return viewYear < first || viewYear > last;\n  }\n}\n\nfunction getTextDirection(el) {\n  return window.getComputedStyle(el).direction;\n}\n\n// Class representing the picker UI\nexport default class Picker {\n  constructor(datepicker) {\n    this.datepicker = datepicker;\n\n    const template = pickerTemplate.replace(/%buttonClass%/g, datepicker.config.buttonClass);\n    const element = this.element = parseHTML(template).firstChild;\n    const [header, main, footer] = element.firstChild.children;\n    const title = header.firstElementChild;\n    const [prevBtn, viewSwitch, nextBtn] = header.lastElementChild.children;\n    const [todayBtn, clearBtn] = footer.firstChild.children;\n    const controls = {\n      title,\n      prevBtn,\n      viewSwitch,\n      nextBtn,\n      todayBtn,\n      clearBtn,\n    };\n    this.main = main;\n    this.controls = controls;\n\n    const elementClass = datepicker.inline ? 'inline' : 'dropdown';\n    element.classList.add(`datepicker-${elementClass}`);\n    elementClass === 'dropdown' ? element.classList.add('dropdown', 'absolute', 'top-0', 'left-0', 'z-50', 'pt-2') : null;\n\n    processPickerOptions(this, datepicker.config);\n    this.viewDate = computeResetViewDate(datepicker);\n\n    // set up event listeners\n    registerListeners(datepicker, [\n      [element, 'click', onClickPicker.bind(null, datepicker), {capture: true}],\n      [main, 'click', onClickView.bind(null, datepicker)],\n      [controls.viewSwitch, 'click', onClickViewSwitch.bind(null, datepicker)],\n      [controls.prevBtn, 'click', onClickPrevBtn.bind(null, datepicker)],\n      [controls.nextBtn, 'click', onClickNextBtn.bind(null, datepicker)],\n      [controls.todayBtn, 'click', onClickTodayBtn.bind(null, datepicker)],\n      [controls.clearBtn, 'click', onClickClearBtn.bind(null, datepicker)],\n    ]);\n\n    // set up views\n    this.views = [\n      new DaysView(this),\n      new MonthsView(this),\n      new YearsView(this, {id: 2, name: 'years', cellClass: 'year', step: 1}),\n      new YearsView(this, {id: 3, name: 'decades', cellClass: 'decade', step: 10}),\n    ];\n    this.currentView = this.views[datepicker.config.startView];\n\n    this.currentView.render();\n    this.main.appendChild(this.currentView.element);\n    datepicker.config.container.appendChild(this.element);\n  }\n\n  setOptions(options) {\n    processPickerOptions(this, options);\n    this.views.forEach((view) => {\n      view.init(options, false);\n    });\n    this.currentView.render();\n  }\n\n  detach() {\n    this.datepicker.config.container.removeChild(this.element);\n  }\n\n  show() {\n    if (this.active) {\n      return;\n    }\n    this.element.classList.add('active', 'block');\n    this.element.classList.remove('hidden');\n    this.active = true;\n\n    const datepicker = this.datepicker;\n    if (!datepicker.inline) {\n      // ensure picker's direction matches input's\n      const inputDirection = getTextDirection(datepicker.inputField);\n      if (inputDirection !== getTextDirection(datepicker.config.container)) {\n        this.element.dir = inputDirection;\n      } else if (this.element.dir) {\n        this.element.removeAttribute('dir');\n      }\n\n      this.place();\n      if (datepicker.config.disableTouchKeyboard) {\n        datepicker.inputField.blur();\n      }\n    }\n    triggerDatepickerEvent(datepicker, 'show');\n  }\n\n  hide() {\n    if (!this.active) {\n      return;\n    }\n    this.datepicker.exitEditMode();\n    this.element.classList.remove('active', 'block');\n    this.element.classList.add('active', 'block', 'hidden');\n    this.active = false;\n    triggerDatepickerEvent(this.datepicker, 'hide');\n  }\n\n  place() {\n    const {classList, style} = this.element;\n    const {config, inputField} = this.datepicker;\n    const container = config.container;\n    const {\n      width: calendarWidth,\n      height: calendarHeight,\n    } = this.element.getBoundingClientRect();\n    const {\n      left: containerLeft,\n      top: containerTop,\n      width: containerWidth,\n    } = container.getBoundingClientRect();\n    const {\n      left: inputLeft,\n      top: inputTop,\n      width: inputWidth,\n      height: inputHeight\n    } = inputField.getBoundingClientRect();\n    let {x: orientX, y: orientY} = config.orientation;\n    let scrollTop;\n    let left;\n    let top;\n\n    if (container === document.body) {\n      scrollTop = window.scrollY;\n      left = inputLeft + window.scrollX;\n      top = inputTop + scrollTop;\n    } else {\n      scrollTop = container.scrollTop;\n      left = inputLeft - containerLeft;\n      top = inputTop - containerTop + scrollTop;\n    }\n\n    if (orientX === 'auto') {\n      if (left < 0) {\n        // align to the left and move into visible area if input's left edge < window's\n        orientX = 'left';\n        left = 10;\n      } else if (left + calendarWidth > containerWidth) {\n        // align to the right if canlendar's right edge > container's\n        orientX = 'right';\n      } else {\n        orientX = getTextDirection(inputField) === 'rtl' ? 'right' : 'left';\n      }\n    }\n    if (orientX === 'right') {\n      left -= calendarWidth - inputWidth;\n    }\n\n    if (orientY === 'auto') {\n      orientY = top - calendarHeight < scrollTop ? 'bottom' : 'top';\n    }\n    if (orientY === 'top') {\n      top -= calendarHeight;\n    } else {\n      top += inputHeight;\n    }\n\n    classList.remove(\n      'datepicker-orient-top',\n      'datepicker-orient-bottom',\n      'datepicker-orient-right',\n      'datepicker-orient-left'\n    );\n    classList.add(`datepicker-orient-${orientY}`, `datepicker-orient-${orientX}`);\n\n    style.top = top ? `${top}px` : top;\n    style.left = left ? `${left}px` : left;\n  }\n\n  setViewSwitchLabel(labelText) {\n    this.controls.viewSwitch.textContent = labelText;\n  }\n\n  setPrevBtnDisabled(disabled) {\n    this.controls.prevBtn.disabled = disabled;\n  }\n\n  setNextBtnDisabled(disabled) {\n    this.controls.nextBtn.disabled = disabled;\n  }\n\n  changeView(viewId) {\n    const oldView = this.currentView;\n    const newView =  this.views[viewId];\n    if (newView.id !== oldView.id) {\n      this.currentView = newView;\n      this._renderMethod = 'render';\n      triggerDatepickerEvent(this.datepicker, 'changeView');\n      this.main.replaceChild(newView.element, oldView.element);\n    }\n    return this;\n  }\n\n  // Change the focused date (view date)\n  changeFocus(newViewDate) {\n    this._renderMethod = setViewDate(this, newViewDate) ? 'render' : 'refreshFocus';\n    this.views.forEach((view) => {\n      view.updateFocus();\n    });\n    return this;\n  }\n\n  // Apply the change of the selected dates\n  update() {\n    const newViewDate = computeResetViewDate(this.datepicker);\n    this._renderMethod = setViewDate(this, newViewDate) ? 'render' : 'refresh';\n    this.views.forEach((view) => {\n      view.updateFocus();\n      view.updateSelection();\n    });\n    return this;\n  }\n\n  // Refresh the picker UI\n  render(quickRender = true) {\n    const renderMethod = (quickRender && this._renderMethod) || 'render';\n    delete this._renderMethod;\n\n    this.currentView[renderMethod]();\n  }\n}\n",
      "start": 1727432817242,
      "end": 1727432817336,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1727432817336,
      "end": 1727432817336,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1727432817336,
      "end": 1727432817336,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1727432817336,
      "end": 1727432817336,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1727432817336,
      "end": 1727432817336,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1727432817336,
      "end": 1727432817336,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1727432817336,
      "end": 1727432817336,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1727432817336,
      "end": 1727432817336,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1727432817336,
      "end": 1727432817336,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1727432817336,
      "end": 1727432817336,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1727432817336,
      "end": 1727432817336,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1727432817336,
      "end": 1727432817336,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1727432817336,
      "end": 1727432817336,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1727432817336,
      "end": 1727432817337,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1727432817337,
      "end": 1727432817337,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1727432817337,
      "end": 1727432817337,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1727432817337,
      "end": 1727432817337,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1727432817337,
      "end": 1727432817337,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1727432817337,
      "end": 1727432817337,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1727432817337,
      "end": 1727432817337,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1727432817337,
      "end": 1727432817337,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1727432817337,
      "end": 1727432817339,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1727432817339,
      "end": 1727432817339,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1727432817339,
      "end": 1727432817339,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1727432817339,
      "end": 1727432817339,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1727432817339,
      "end": 1727432817339,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1727432817339,
      "end": 1727432817339,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1727432817339,
      "end": 1727432817339,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1727432817339,
      "end": 1727432817339,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1727432817339,
      "end": 1727432817339,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1727432817339,
      "end": 1727432817339,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1727432817339,
      "end": 1727432817339,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1727432817339,
      "end": 1727432817339,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1727432817339,
      "end": 1727432817339,
      "order": "normal"
    }
  ]
}
