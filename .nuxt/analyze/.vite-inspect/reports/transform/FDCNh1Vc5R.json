{
  "resolvedId": "/var/www/html/Sueen-Nature-Frontend/node_modules/flowbite/lib/esm/components/input-counter/index.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport instances from '../../dom/instances';\nvar Default = {\n    minValue: null,\n    maxValue: null,\n    onIncrement: function () { },\n    onDecrement: function () { },\n};\nvar DefaultInstanceOptions = {\n    id: null,\n    override: true,\n};\nvar InputCounter = /** @class */ (function () {\n    function InputCounter(targetEl, incrementEl, decrementEl, options, instanceOptions) {\n        if (targetEl === void 0) { targetEl = null; }\n        if (incrementEl === void 0) { incrementEl = null; }\n        if (decrementEl === void 0) { decrementEl = null; }\n        if (options === void 0) { options = Default; }\n        if (instanceOptions === void 0) { instanceOptions = DefaultInstanceOptions; }\n        this._instanceId = instanceOptions.id\n            ? instanceOptions.id\n            : targetEl.id;\n        this._targetEl = targetEl;\n        this._incrementEl = incrementEl;\n        this._decrementEl = decrementEl;\n        this._options = __assign(__assign({}, Default), options);\n        this._initialized = false;\n        this.init();\n        instances.addInstance('InputCounter', this, this._instanceId, instanceOptions.override);\n    }\n    InputCounter.prototype.init = function () {\n        var _this = this;\n        if (this._targetEl && !this._initialized) {\n            this._inputHandler = function (event) {\n                {\n                    var target = event.target;\n                    // check if the value is numeric\n                    if (!/^\\d*$/.test(target.value)) {\n                        // Regex to check if the value is numeric\n                        target.value = target.value.replace(/[^\\d]/g, ''); // Remove non-numeric characters\n                    }\n                    // check for max value\n                    if (_this._options.maxValue !== null &&\n                        parseInt(target.value) > _this._options.maxValue) {\n                        target.value = _this._options.maxValue.toString();\n                    }\n                    // check for min value\n                    if (_this._options.minValue !== null &&\n                        parseInt(target.value) < _this._options.minValue) {\n                        target.value = _this._options.minValue.toString();\n                    }\n                }\n            };\n            this._incrementClickHandler = function () {\n                _this.increment();\n            };\n            this._decrementClickHandler = function () {\n                _this.decrement();\n            };\n            // Add event listener to restrict input to numeric values only\n            this._targetEl.addEventListener('input', this._inputHandler);\n            if (this._incrementEl) {\n                this._incrementEl.addEventListener('click', this._incrementClickHandler);\n            }\n            if (this._decrementEl) {\n                this._decrementEl.addEventListener('click', this._decrementClickHandler);\n            }\n            this._initialized = true;\n        }\n    };\n    InputCounter.prototype.destroy = function () {\n        if (this._targetEl && this._initialized) {\n            this._targetEl.removeEventListener('input', this._inputHandler);\n            if (this._incrementEl) {\n                this._incrementEl.removeEventListener('click', this._incrementClickHandler);\n            }\n            if (this._decrementEl) {\n                this._decrementEl.removeEventListener('click', this._decrementClickHandler);\n            }\n            this._initialized = false;\n        }\n    };\n    InputCounter.prototype.removeInstance = function () {\n        instances.removeInstance('InputCounter', this._instanceId);\n    };\n    InputCounter.prototype.destroyAndRemoveInstance = function () {\n        this.destroy();\n        this.removeInstance();\n    };\n    InputCounter.prototype.getCurrentValue = function () {\n        return parseInt(this._targetEl.value) || 0;\n    };\n    InputCounter.prototype.increment = function () {\n        // don't increment if the value is already at the maximum value\n        if (this._options.maxValue !== null &&\n            this.getCurrentValue() >= this._options.maxValue) {\n            return;\n        }\n        this._targetEl.value = (this.getCurrentValue() + 1).toString();\n        this._options.onIncrement(this);\n    };\n    InputCounter.prototype.decrement = function () {\n        // don't decrement if the value is already at the minimum value\n        if (this._options.minValue !== null &&\n            this.getCurrentValue() <= this._options.minValue) {\n            return;\n        }\n        this._targetEl.value = (this.getCurrentValue() - 1).toString();\n        this._options.onDecrement(this);\n    };\n    InputCounter.prototype.updateOnIncrement = function (callback) {\n        this._options.onIncrement = callback;\n    };\n    InputCounter.prototype.updateOnDecrement = function (callback) {\n        this._options.onDecrement = callback;\n    };\n    return InputCounter;\n}());\nexport function initInputCounters() {\n    document.querySelectorAll('[data-input-counter]').forEach(function ($targetEl) {\n        var targetId = $targetEl.id;\n        var $incrementEl = document.querySelector('[data-input-counter-increment=\"' + targetId + '\"]');\n        var $decrementEl = document.querySelector('[data-input-counter-decrement=\"' + targetId + '\"]');\n        var minValue = $targetEl.getAttribute('data-input-counter-min');\n        var maxValue = $targetEl.getAttribute('data-input-counter-max');\n        // check if the target element exists\n        if ($targetEl) {\n            if (!instances.instanceExists('InputCounter', $targetEl.getAttribute('id'))) {\n                new InputCounter($targetEl, $incrementEl ? $incrementEl : null, $decrementEl ? $decrementEl : null, {\n                    minValue: minValue ? parseInt(minValue) : null,\n                    maxValue: maxValue ? parseInt(maxValue) : null,\n                });\n            }\n        }\n        else {\n            console.error(\"The target element with id \\\"\".concat(targetId, \"\\\" does not exist. Please check the data-input-counter attribute.\"));\n        }\n    });\n}\nif (typeof window !== 'undefined') {\n    window.InputCounter = InputCounter;\n    window.initInputCounters = initInputCounters;\n}\nexport default InputCounter;\n//# sourceMappingURL=index.js.map",
      "start": 1727432816856,
      "end": 1727432817088,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1727432817088,
      "end": 1727432817088,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1727432817088,
      "end": 1727432817088,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1727432817088,
      "end": 1727432817088,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1727432817088,
      "end": 1727432817088,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1727432817088,
      "end": 1727432817088,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1727432817088,
      "end": 1727432817088,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1727432817088,
      "end": 1727432817088,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1727432817088,
      "end": 1727432817088,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1727432817088,
      "end": 1727432817088,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1727432817088,
      "end": 1727432817088,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1727432817088,
      "end": 1727432817088,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1727432817088,
      "end": 1727432817088,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1727432817088,
      "end": 1727432817088,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1727432817088,
      "end": 1727432817088,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1727432817088,
      "end": 1727432817088,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1727432817088,
      "end": 1727432817088,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1727432817089,
      "end": 1727432817089,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1727432817089,
      "end": 1727432817089,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1727432817089,
      "end": 1727432817089,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1727432817089,
      "end": 1727432817089,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1727432817089,
      "end": 1727432817090,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1727432817090,
      "end": 1727432817090,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1727432817090,
      "end": 1727432817090,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1727432817090,
      "end": 1727432817090,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1727432817090,
      "end": 1727432817090,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1727432817090,
      "end": 1727432817090,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1727432817090,
      "end": 1727432817090,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1727432817090,
      "end": 1727432817090,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1727432817090,
      "end": 1727432817090,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1727432817090,
      "end": 1727432817090,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1727432817090,
      "end": 1727432817090,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1727432817090,
      "end": 1727432817091,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1727432817091,
      "end": 1727432817091,
      "order": "normal"
    }
  ]
}
