{
  "resolvedId": "/var/www/html/Sueen-Nature-Frontend/node_modules/flowbite-datepicker/js/lib/date-format.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import {stripTime, today} from './date.js';\nimport {lastItemOf} from './utils.js';\n\n// pattern for format parts\nexport const reFormatTokens = /dd?|DD?|mm?|MM?|yy?(?:yy)?/;\n// pattern for non date parts\nexport const reNonDateParts = /[\\s!-/:-@[-`{-~年月日]+/;\n// cache for persed formats\nlet knownFormats = {};\n// parse funtions for date parts\nconst parseFns = {\n  y(date, year) {\n    return new Date(date).setFullYear(parseInt(year, 10));\n  },\n  m(date, month, locale) {\n    const newDate = new Date(date);\n    let monthIndex = parseInt(month, 10) - 1;\n\n    if (isNaN(monthIndex)) {\n      if (!month) {\n        return NaN;\n      }\n\n      const monthName = month.toLowerCase();\n      const compareNames = name => name.toLowerCase().startsWith(monthName);\n      // compare with both short and full names because some locales have periods\n      // in the short names (not equal to the first X letters of the full names)\n      monthIndex = locale.monthsShort.findIndex(compareNames);\n      if (monthIndex < 0) {\n        monthIndex = locale.months.findIndex(compareNames);\n      }\n      if (monthIndex < 0) {\n        return NaN;\n      }\n    }\n\n    newDate.setMonth(monthIndex);\n    return newDate.getMonth() !== normalizeMonth(monthIndex)\n      ? newDate.setDate(0)\n      : newDate.getTime();\n  },\n  d(date, day) {\n    return new Date(date).setDate(parseInt(day, 10));\n  },\n};\n// format functions for date parts\nconst formatFns = {\n  d(date) {\n    return date.getDate();\n  },\n  dd(date) {\n    return padZero(date.getDate(), 2);\n  },\n  D(date, locale) {\n    return locale.daysShort[date.getDay()];\n  },\n  DD(date, locale) {\n    return locale.days[date.getDay()];\n  },\n  m(date) {\n    return date.getMonth() + 1;\n  },\n  mm(date) {\n    return padZero(date.getMonth() + 1, 2);\n  },\n  M(date, locale) {\n    return locale.monthsShort[date.getMonth()];\n  },\n  MM(date, locale) {\n    return locale.months[date.getMonth()];\n  },\n  y(date) {\n    return date.getFullYear();\n  },\n  yy(date) {\n    return padZero(date.getFullYear(), 2).slice(-2);\n  },\n  yyyy(date) {\n    return padZero(date.getFullYear(), 4);\n  },\n};\n\n// get month index in normal range (0 - 11) from any number\nfunction normalizeMonth(monthIndex) {\n  return monthIndex > -1 ? monthIndex % 12 : normalizeMonth(monthIndex + 12);\n}\n\nfunction padZero(num, length) {\n  return num.toString().padStart(length, '0');\n}\n\nfunction parseFormatString(format) {\n  if (typeof format !== 'string') {\n    throw new Error(\"Invalid date format.\");\n  }\n  if (format in knownFormats) {\n    return knownFormats[format];\n  }\n\n  // sprit the format string into parts and seprators\n  const separators = format.split(reFormatTokens);\n  const parts = format.match(new RegExp(reFormatTokens, 'g'));\n  if (separators.length === 0 || !parts) {\n    throw new Error(\"Invalid date format.\");\n  }\n\n  // collect format functions used in the format\n  const partFormatters = parts.map(token => formatFns[token]);\n\n  // collect parse function keys used in the format\n  // iterate over parseFns' keys in order to keep the order of the keys.\n  const partParserKeys = Object.keys(parseFns).reduce((keys, key) => {\n    const token = parts.find(part => part[0] !== 'D' && part[0].toLowerCase() === key);\n    if (token) {\n      keys.push(key);\n    }\n    return keys;\n  }, []);\n\n  return knownFormats[format] = {\n    parser(dateStr, locale) {\n      const dateParts = dateStr.split(reNonDateParts).reduce((dtParts, part, index) => {\n        if (part.length > 0 && parts[index]) {\n          const token = parts[index][0];\n          if (token === 'M') {\n            dtParts.m = part;\n          } else if (token !== 'D') {\n            dtParts[token] = part;\n          }\n        }\n        return dtParts;\n      }, {});\n\n      // iterate over partParserkeys so that the parsing is made in the oder\n      // of year, month and day to prevent the day parser from correcting last\n      // day of month wrongly\n      return partParserKeys.reduce((origDate, key) => {\n        const newDate = parseFns[key](origDate, dateParts[key], locale);\n        // ingnore the part failed to parse\n        return isNaN(newDate) ? origDate : newDate;\n      }, today());\n    },\n    formatter(date, locale) {\n      let dateStr = partFormatters.reduce((str, fn, index) => {\n        return str += `${separators[index]}${fn(date, locale)}`;\n      }, '');\n      // separators' length is always parts' length + 1,\n      return dateStr += lastItemOf(separators);\n    },\n  };\n}\n\nexport function parseDate(dateStr, format, locale) {\n  if (dateStr instanceof Date || typeof dateStr === 'number') {\n    const date = stripTime(dateStr);\n    return isNaN(date) ? undefined : date;\n  }\n  if (!dateStr) {\n    return undefined;\n  }\n  if (dateStr === 'today') {\n    return today();\n  }\n\n  if (format && format.toValue) {\n    const date = format.toValue(dateStr, format, locale);\n    return isNaN(date) ? undefined : stripTime(date);\n  }\n\n  return parseFormatString(format).parser(dateStr, locale);\n}\n\nexport function formatDate(date, format, locale) {\n  if (isNaN(date) || (!date && date !== 0)) {\n    return '';\n  }\n\n  const dateObj = typeof date === 'number' ? new Date(date) : date;\n\n  if (format.toDisplay) {\n    return format.toDisplay(dateObj, format, locale);\n  }\n\n  return parseFormatString(format).formatter(dateObj, locale);\n}\n",
      "start": 1727432817234,
      "end": 1727432817325,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1727432817326,
      "end": 1727432817326,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1727432817326,
      "end": 1727432817326,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1727432817326,
      "end": 1727432817326,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1727432817326,
      "end": 1727432817326,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1727432817326,
      "end": 1727432817326,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1727432817326,
      "end": 1727432817326,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1727432817326,
      "end": 1727432817326,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1727432817326,
      "end": 1727432817326,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1727432817326,
      "end": 1727432817326,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1727432817326,
      "end": 1727432817326,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1727432817326,
      "end": 1727432817326,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1727432817326,
      "end": 1727432817326,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1727432817326,
      "end": 1727432817326,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1727432817326,
      "end": 1727432817327,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1727432817327,
      "end": 1727432817327,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1727432817327,
      "end": 1727432817327,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1727432817327,
      "end": 1727432817327,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1727432817327,
      "end": 1727432817327,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1727432817327,
      "end": 1727432817327,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1727432817327,
      "end": 1727432817327,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1727432817327,
      "end": 1727432817328,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1727432817328,
      "end": 1727432817328,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1727432817328,
      "end": 1727432817328,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1727432817328,
      "end": 1727432817328,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1727432817328,
      "end": 1727432817328,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1727432817328,
      "end": 1727432817328,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1727432817328,
      "end": 1727432817328,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1727432817328,
      "end": 1727432817328,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1727432817328,
      "end": 1727432817328,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1727432817328,
      "end": 1727432817328,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1727432817328,
      "end": 1727432817328,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1727432817328,
      "end": 1727432817328,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1727432817328,
      "end": 1727432817329,
      "order": "normal"
    }
  ]
}
