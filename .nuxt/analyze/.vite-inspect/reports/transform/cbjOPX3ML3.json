{
  "resolvedId": "/var/www/html/Sueen-Nature-Frontend/node_modules/flowbite-datepicker/js/picker/views/DaysView.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import {hasProperty, pushUnique} from '../../lib/utils.js';\nimport {today, dateValue, addDays, addWeeks, dayOfTheWeekOf, getWeek} from '../../lib/date.js';\nimport {formatDate} from '../../lib/date-format.js';\nimport {parseHTML, showElement, hideElement} from '../../lib/dom.js';\nimport daysTemplate from '../templates/daysTemplate.js';\nimport calendarWeeksTemplate from '../templates/calendarWeeksTemplate.js';\nimport View from './View.js';\n\nexport default class DaysView extends View {\n  constructor(picker) {\n    super(picker, {\n      id: 0,\n      name: 'days',\n      cellClass: 'day',\n    });\n  }\n\n  init(options, onConstruction = true) {\n    if (onConstruction) {\n      const inner = parseHTML(daysTemplate).firstChild;\n      this.dow = inner.firstChild;\n      this.grid = inner.lastChild;\n      this.element.appendChild(inner);\n    }\n    super.init(options);\n  }\n\n  setOptions(options) {\n    let updateDOW;\n\n    if (hasProperty(options, 'minDate')) {\n      this.minDate = options.minDate;\n    }\n    if (hasProperty(options, 'maxDate')) {\n      this.maxDate = options.maxDate;\n    }\n    if (options.datesDisabled) {\n      this.datesDisabled = options.datesDisabled;\n    }\n    if (options.daysOfWeekDisabled) {\n      this.daysOfWeekDisabled = options.daysOfWeekDisabled;\n      updateDOW = true;\n    }\n    if (options.daysOfWeekHighlighted) {\n      this.daysOfWeekHighlighted = options.daysOfWeekHighlighted;\n    }\n    if (options.todayHighlight !== undefined) {\n      this.todayHighlight = options.todayHighlight;\n    }\n    if (options.weekStart !== undefined) {\n      this.weekStart = options.weekStart;\n      this.weekEnd = options.weekEnd;\n      updateDOW = true;\n    }\n    if (options.locale) {\n      const locale = this.locale = options.locale;\n      this.dayNames = locale.daysMin;\n      this.switchLabelFormat = locale.titleFormat;\n      updateDOW = true;\n    }\n    if (options.beforeShowDay !== undefined) {\n      this.beforeShow = typeof options.beforeShowDay === 'function'\n        ? options.beforeShowDay\n        : undefined;\n    }\n\n    if (options.calendarWeeks !== undefined) {\n      if (options.calendarWeeks && !this.calendarWeeks) {\n        const weeksElem = parseHTML(calendarWeeksTemplate).firstChild;\n        this.calendarWeeks = {\n          element: weeksElem,\n          dow: weeksElem.firstChild,\n          weeks: weeksElem.lastChild,\n        };\n        this.element.insertBefore(weeksElem, this.element.firstChild);\n      } else if (this.calendarWeeks && !options.calendarWeeks) {\n        this.element.removeChild(this.calendarWeeks.element);\n        this.calendarWeeks = null;\n      }\n    }\n    if (options.showDaysOfWeek !== undefined) {\n      if (options.showDaysOfWeek) {\n        showElement(this.dow);\n        if (this.calendarWeeks) {\n          showElement(this.calendarWeeks.dow);\n        }\n      } else {\n        hideElement(this.dow);\n        if (this.calendarWeeks) {\n          hideElement(this.calendarWeeks.dow);\n        }\n      }\n    }\n\n    // update days-of-week when locale, daysOfweekDisabled or weekStart is changed\n    if (updateDOW) {\n      Array.from(this.dow.children).forEach((el, index) => {\n        const dow = (this.weekStart + index) % 7;\n        el.textContent = this.dayNames[dow];\n        el.className = this.daysOfWeekDisabled.includes(dow) ? 'dow disabled text-center h-6 leading-6 text-sm font-medium text-gray-500 dark:text-gray-400 cursor-not-allowed' : 'dow text-center h-6 leading-6 text-sm font-medium text-gray-500 dark:text-gray-400';\n      });\n    }\n  }\n\n  // Apply update on the focused date to view's settings\n  updateFocus() {\n    const viewDate = new Date(this.picker.viewDate);\n    const viewYear = viewDate.getFullYear();\n    const viewMonth = viewDate.getMonth();\n    const firstOfMonth = dateValue(viewYear, viewMonth, 1);\n    const start = dayOfTheWeekOf(firstOfMonth, this.weekStart, this.weekStart);\n\n    this.first = firstOfMonth;\n    this.last = dateValue(viewYear, viewMonth + 1, 0);\n    this.start = start;\n    this.focused = this.picker.viewDate;\n  }\n\n  // Apply update on the selected dates to view's settings\n  updateSelection() {\n    const {dates, rangepicker} = this.picker.datepicker;\n    this.selected = dates;\n    if (rangepicker) {\n      this.range = rangepicker.dates;\n    }\n  }\n\n   // Update the entire view UI\n  render() {\n    // update today marker on ever render\n    this.today = this.todayHighlight ? today() : undefined;\n    // refresh disabled dates on every render in order to clear the ones added\n    // by beforeShow hook at previous render\n    this.disabled = [...this.datesDisabled];\n\n    const switchLabel = formatDate(this.focused, this.switchLabelFormat, this.locale);\n    this.picker.setViewSwitchLabel(switchLabel);\n    this.picker.setPrevBtnDisabled(this.first <= this.minDate);\n    this.picker.setNextBtnDisabled(this.last >= this.maxDate);\n\n    if (this.calendarWeeks) {\n      // start of the UTC week (Monday) of the 1st of the month\n      const startOfWeek = dayOfTheWeekOf(this.first, 1, 1);\n      Array.from(this.calendarWeeks.weeks.children).forEach((el, index) => {\n        el.textContent = getWeek(addWeeks(startOfWeek, index));\n      });\n    }\n    Array.from(this.grid.children).forEach((el, index) => {\n      const classList = el.classList;\n      const current = addDays(this.start, index);\n      const date = new Date(current);\n      const day = date.getDay();\n\n      el.className = `datepicker-cell hover:bg-gray-100 dark:hover:bg-gray-600 block flex-1 leading-9 border-0 rounded-lg cursor-pointer text-center text-gray-900 dark:text-white font-semibold text-sm ${this.cellClass}`;\n      el.dataset.date = current;\n      el.textContent = date.getDate();\n\n      if (current < this.first) {\n        classList.add('prev', 'text-gray-500', 'dark:text-white');\n      } else if (current > this.last) {\n        classList.add('next', 'text-gray-500', 'dark:text-white');\n      }\n      if (this.today === current) {\n        classList.add('today', 'bg-gray-100', 'dark:bg-gray-600');\n      }\n      if (current < this.minDate || current > this.maxDate || this.disabled.includes(current)) {\n        classList.add('disabled', 'cursor-not-allowed');\n      }\n      if (this.daysOfWeekDisabled.includes(day)) {\n        classList.add('disabled', 'cursor-not-allowed');\n        pushUnique(this.disabled, current);\n      }\n      if (this.daysOfWeekHighlighted.includes(day)) {\n        classList.add('highlighted');\n      }\n      if (this.range) {\n        const [rangeStart, rangeEnd] = this.range;\n        if (current > rangeStart && current < rangeEnd) {\n          classList.add('range', 'bg-gray-200', 'dark:bg-gray-600');\n          classList.remove('rounded-lg', 'rounded-l-lg', 'rounded-r-lg')\n        }\n        if (current === rangeStart) {\n          classList.add('range-start', 'bg-gray-100', 'dark:bg-gray-600', 'rounded-l-lg');\n          classList.remove('rounded-lg', 'rounded-r-lg');\n        }\n        if (current === rangeEnd) {\n          classList.add('range-end', 'bg-gray-100', 'dark:bg-gray-600', 'rounded-r-lg');\n          classList.remove('rounded-lg', 'rounded-l-lg');\n        }\n      }\n      if (this.selected.includes(current)) {\n        classList.add('selected', 'bg-blue-700', '!bg-primary-700', 'text-white', 'dark:bg-blue-600', 'dark:!bg-primary-600', 'dark:text-white');\n        classList.remove('text-gray-900', 'text-gray-500', 'hover:bg-gray-100', 'dark:text-white', 'dark:hover:bg-gray-600', 'dark:bg-gray-600', 'bg-gray-100', 'bg-gray-200');\n      }\n      if (current === this.focused) {\n        classList.add('focused');\n      }\n\n      if (this.beforeShow) {\n        this.performBeforeHook(el, current, current);\n      }\n    });\n  }\n\n  // Update the view UI by applying the changes of selected and focused items\n  refresh() {\n    const [rangeStart, rangeEnd] = this.range || [];\n    this.grid\n      .querySelectorAll('.range, .range-start, .range-end, .selected, .focused')\n      .forEach((el) => {\n        el.classList.remove('range', 'range-start', 'range-end', 'selected', 'bg-blue-700', '!bg-primary-700', 'text-white', 'dark:bg-blue-600', 'dark:!bg-primary-600', 'dark:text-white', 'focused');\n        el.classList.add('text-gray-900', 'rounded-lg', 'dark:text-white');\n      });\n    Array.from(this.grid.children).forEach((el) => {\n      const current = Number(el.dataset.date);\n      const classList = el.classList;\n      classList.remove('bg-gray-200', 'dark:bg-gray-600', 'rounded-l-lg', 'rounded-r-lg')\n      if (current > rangeStart && current < rangeEnd) {\n        classList.add('range', 'bg-gray-200', 'dark:bg-gray-600');\n        classList.remove('rounded-lg');\n      }\n      if (current === rangeStart) {\n        classList.add('range-start', 'bg-gray-200', 'dark:bg-gray-600', 'rounded-l-lg');\n        classList.remove('rounded-lg', 'rounded-r-lg');\n      }\n      if (current === rangeEnd) {\n        classList.add('range-end', 'bg-gray-200', 'dark:bg-gray-600', 'rounded-r-lg');\n        classList.remove('rounded-lg', 'rounded-l-lg');\n      }\n      if (this.selected.includes(current)) {\n        classList.add('selected', 'bg-blue-700', '!bg-primary-700', 'text-white', 'dark:bg-blue-600', 'dark:!bg-primary-600', 'dark:text-white');\n        classList.remove('text-gray-900', 'hover:bg-gray-100', 'dark:text-white', 'dark:hover:bg-gray-600', 'bg-gray-100', 'bg-gray-200', 'dark:bg-gray-600');\n      }\n      if (current === this.focused) {\n        classList.add('focused');\n      }\n    });\n  }\n\n  // Update the view UI by applying the change of focused item\n  refreshFocus() {\n    const index = Math.round((this.focused - this.start) / 86400000);\n    this.grid.querySelectorAll('.focused').forEach((el) => {\n      el.classList.remove('focused');\n    });\n    this.grid.children[index].classList.add('focused');\n  }\n}\n",
      "start": 1727432818929,
      "end": 1727432819060,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1727432819060,
      "end": 1727432819060,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1727432819060,
      "end": 1727432819060,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1727432819060,
      "end": 1727432819060,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1727432819060,
      "end": 1727432819060,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1727432819060,
      "end": 1727432819060,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1727432819060,
      "end": 1727432819060,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1727432819060,
      "end": 1727432819060,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1727432819060,
      "end": 1727432819060,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1727432819060,
      "end": 1727432819060,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1727432819060,
      "end": 1727432819060,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1727432819060,
      "end": 1727432819060,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1727432819060,
      "end": 1727432819060,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1727432819060,
      "end": 1727432819061,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1727432819061,
      "end": 1727432819061,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1727432819061,
      "end": 1727432819061,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1727432819061,
      "end": 1727432819061,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1727432819061,
      "end": 1727432819061,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1727432819061,
      "end": 1727432819061,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1727432819061,
      "end": 1727432819061,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1727432819061,
      "end": 1727432819061,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1727432819061,
      "end": 1727432819063,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1727432819063,
      "end": 1727432819063,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1727432819063,
      "end": 1727432819063,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1727432819063,
      "end": 1727432819063,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1727432819063,
      "end": 1727432819063,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1727432819063,
      "end": 1727432819063,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1727432819063,
      "end": 1727432819063,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1727432819063,
      "end": 1727432819063,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1727432819063,
      "end": 1727432819063,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1727432819063,
      "end": 1727432819063,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1727432819063,
      "end": 1727432819063,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1727432819063,
      "end": 1727432819063,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1727432819063,
      "end": 1727432819063,
      "order": "normal"
    }
  ]
}
